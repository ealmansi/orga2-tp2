
color_filter_c.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <color_filter_c>:
                    unsigned char gc,
                    unsigned char bc,
                    int threshold,
                    int width,
                    int height)
{
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
   8:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
   c:	89 c8                	mov    eax,ecx
   e:	44 89 c1             	mov    ecx,r8d
  11:	44 89 4d c0          	mov    DWORD PTR [rbp-0x40],r9d
  15:	88 55 cc             	mov    BYTE PTR [rbp-0x34],dl
  18:	88 45 c8             	mov    BYTE PTR [rbp-0x38],al
  1b:	88 4d c4             	mov    BYTE PTR [rbp-0x3c],cl
	//TIMER_BEGIN();

	int r, g, b, diff_r, diff_g, diff_b, dist;
	threshold *= threshold;
  1e:	8b 45 c0             	mov    eax,DWORD PTR [rbp-0x40]
  21:	0f af 45 c0          	imul   eax,DWORD PTR [rbp-0x40]
  25:	89 45 c0             	mov    DWORD PTR [rbp-0x40],eax
	for (int i = 0; i < 3 * width * height; i += 3)
  28:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [rbp-0x14],0x0
  2f:	e9 0f 01 00 00       	jmp    143 <color_filter_c+0x143>
	{
		r = red(src, i);
  34:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  37:	48 98                	cdqe   
  39:	48 8d 50 02          	lea    rdx,[rax+0x2]
  3d:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  41:	48 01 d0             	add    rax,rdx
  44:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  47:	0f b6 c0             	movzx  eax,al
  4a:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax
		g = green(src, i);
  4d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  50:	48 98                	cdqe   
  52:	48 8d 50 01          	lea    rdx,[rax+0x1]
  56:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  5a:	48 01 d0             	add    rax,rdx
  5d:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  60:	0f b6 c0             	movzx  eax,al
  63:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
		b = blue(src, i);
  66:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  69:	48 63 d0             	movsxd rdx,eax
  6c:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
  70:	48 01 d0             	add    rax,rdx
  73:	0f b6 00             	movzx  eax,BYTE PTR [rax]
  76:	0f b6 c0             	movzx  eax,al
  79:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax

		diff_r = r - rc;
  7c:	0f b6 45 cc          	movzx  eax,BYTE PTR [rbp-0x34]
  80:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
  83:	89 d1                	mov    ecx,edx
  85:	29 c1                	sub    ecx,eax
  87:	89 c8                	mov    eax,ecx
  89:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax
		diff_g = g - gc;
  8c:	0f b6 45 c8          	movzx  eax,BYTE PTR [rbp-0x38]
  90:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
  93:	89 d1                	mov    ecx,edx
  95:	29 c1                	sub    ecx,eax
  97:	89 c8                	mov    eax,ecx
  99:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
		diff_b = b - bc;
  9c:	0f b6 45 c4          	movzx  eax,BYTE PTR [rbp-0x3c]
  a0:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  a3:	89 d1                	mov    ecx,edx
  a5:	29 c1                	sub    ecx,eax
  a7:	89 c8                	mov    eax,ecx
  a9:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
		dist = diff_r * diff_r + diff_g * diff_g + diff_b * diff_b;
  ac:	8b 45 f0             	mov    eax,DWORD PTR [rbp-0x10]
  af:	89 c2                	mov    edx,eax
  b1:	0f af 55 f0          	imul   edx,DWORD PTR [rbp-0x10]
  b5:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
  b8:	0f af 45 f4          	imul   eax,DWORD PTR [rbp-0xc]
  bc:	01 c2                	add    edx,eax
  be:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  c1:	0f af 45 f8          	imul   eax,DWORD PTR [rbp-0x8]
  c5:	01 d0                	add    eax,edx
  c7:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax

		if(dist > threshold)
  ca:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  cd:	3b 45 c0             	cmp    eax,DWORD PTR [rbp-0x40]
  d0:	7e 31                	jle    103 <color_filter_c+0x103>
			r = g = b = ((r + g + b) / 3);
  d2:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
  d5:	8b 55 e0             	mov    edx,DWORD PTR [rbp-0x20]
  d8:	01 c2                	add    edx,eax
  da:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  dd:	8d 0c 02             	lea    ecx,[rdx+rax*1]
  e0:	ba 56 55 55 55       	mov    edx,0x55555556
  e5:	89 c8                	mov    eax,ecx
  e7:	f7 ea                	imul   edx
  e9:	89 c8                	mov    eax,ecx
  eb:	c1 f8 1f             	sar    eax,0x1f
  ee:	89 d1                	mov    ecx,edx
  f0:	29 c1                	sub    ecx,eax
  f2:	89 c8                	mov    eax,ecx
  f4:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  f7:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  fa:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  fd:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
 100:	89 45 e0             	mov    DWORD PTR [rbp-0x20],eax

		red(dst, i) = r;
 103:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 106:	48 98                	cdqe   
 108:	48 8d 50 02          	lea    rdx,[rax+0x2]
 10c:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 110:	48 01 c2             	add    rdx,rax
 113:	8b 45 e0             	mov    eax,DWORD PTR [rbp-0x20]
 116:	88 02                	mov    BYTE PTR [rdx],al
		green(dst, i) = g;
 118:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 11b:	48 98                	cdqe   
 11d:	48 8d 50 01          	lea    rdx,[rax+0x1]
 121:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 125:	48 01 c2             	add    rdx,rax
 128:	8b 45 e4             	mov    eax,DWORD PTR [rbp-0x1c]
 12b:	88 02                	mov    BYTE PTR [rdx],al
		blue(dst, i) = b;
 12d:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 130:	48 63 d0             	movsxd rdx,eax
 133:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 137:	48 01 c2             	add    rdx,rax
 13a:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
 13d:	88 02                	mov    BYTE PTR [rdx],al
{
	//TIMER_BEGIN();

	int r, g, b, diff_r, diff_g, diff_b, dist;
	threshold *= threshold;
	for (int i = 0; i < 3 * width * height; i += 3)
 13f:	83 45 ec 03          	add    DWORD PTR [rbp-0x14],0x3
 143:	8b 55 10             	mov    edx,DWORD PTR [rbp+0x10]
 146:	89 d0                	mov    eax,edx
 148:	01 c0                	add    eax,eax
 14a:	01 d0                	add    eax,edx
 14c:	0f af 45 18          	imul   eax,DWORD PTR [rbp+0x18]
 150:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
 153:	0f 8f db fe ff ff    	jg     34 <color_filter_c+0x34>
		green(dst, i) = g;
		blue(dst, i) = b;
	}

	//TIMER_END();
}
 159:	5d                   	pop    rbp
 15a:	c3                   	ret    
