
color_filter_c.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <color_filter_c>:
                    unsigned char gc,
                    unsigned char bc,
                    int threshold,
                    int width,
                    int height)
{
   0:	41 57                	push   r15
   2:	41 56                	push   r14
   4:	41 55                	push   r13
   6:	41 54                	push   r12
   8:	55                   	push   rbp
   9:	53                   	push   rbx
   a:	8b 44 24 38          	mov    eax,DWORD PTR [rsp+0x38]
	//TIMER_BEGIN();

	int r, g, b, diff_r, diff_g, diff_b, dist;
	threshold *= threshold;
   e:	45 0f af c9          	imul   r9d,r9d
	for (int i = 0; i < 3 * width * height; i += 3)
  12:	8d 2c 40             	lea    ebp,[rax+rax*2]
  15:	0f af 6c 24 40       	imul   ebp,DWORD PTR [rsp+0x40]
  1a:	85 ed                	test   ebp,ebp
  1c:	7e 74                	jle    92 <color_filter_c+0x92>
  1e:	41 bb 00 00 00 00    	mov    r11d,0x0
	{
		r = red(src, i);
		g = green(src, i);
		b = blue(src, i);

		diff_r = r - rc;
  24:	44 0f b6 ea          	movzx  r13d,dl
		diff_g = g - gc;
  28:	0f b6 c9             	movzx  ecx,cl
		diff_b = b - bc;
  2b:	45 0f b6 e0          	movzx  r12d,r8b

	int r, g, b, diff_r, diff_g, diff_b, dist;
	threshold *= threshold;
	for (int i = 0; i < 3 * width * height; i += 3)
	{
		r = red(src, i);
  2f:	4d 63 c3             	movsxd r8,r11d
  32:	42 0f b6 54 07 02    	movzx  edx,BYTE PTR [rdi+r8*1+0x2]
		g = green(src, i);
  38:	46 0f b6 54 07 01    	movzx  r10d,BYTE PTR [rdi+r8*1+0x1]
		b = blue(src, i);
  3e:	42 0f b6 04 07       	movzx  eax,BYTE PTR [rdi+r8*1]

		diff_r = r - rc;
  43:	41 89 d7             	mov    r15d,edx
  46:	45 29 ef             	sub    r15d,r13d
		diff_g = g - gc;
  49:	45 89 d6             	mov    r14d,r10d
  4c:	41 29 ce             	sub    r14d,ecx
		diff_b = b - bc;
  4f:	89 c3                	mov    ebx,eax
  51:	44 29 e3             	sub    ebx,r12d
		dist = diff_r * diff_r + diff_g * diff_g + diff_b * diff_b;
  54:	45 0f af ff          	imul   r15d,r15d
  58:	45 0f af f6          	imul   r14d,r14d
  5c:	45 01 fe             	add    r14d,r15d
  5f:	0f af db             	imul   ebx,ebx
  62:	44 01 f3             	add    ebx,r14d

		if(dist > threshold)
  65:	41 39 d9             	cmp    r9d,ebx
  68:	7d 11                	jge    7b <color_filter_c+0x7b>
			r = g = b = ((r + g + b) / 3);
  6a:	44 01 d2             	add    edx,r10d
  6d:	01 c2                	add    edx,eax
  6f:	b8 56 55 55 55       	mov    eax,0x55555556
  74:	f7 ea                	imul   edx
  76:	89 d0                	mov    eax,edx
  78:	41 89 d2             	mov    r10d,edx

		red(dst, i) = r;
  7b:	42 88 54 06 02       	mov    BYTE PTR [rsi+r8*1+0x2],dl
		green(dst, i) = g;
  80:	46 88 54 06 01       	mov    BYTE PTR [rsi+r8*1+0x1],r10b
		blue(dst, i) = b;
  85:	42 88 04 06          	mov    BYTE PTR [rsi+r8*1],al
{
	//TIMER_BEGIN();

	int r, g, b, diff_r, diff_g, diff_b, dist;
	threshold *= threshold;
	for (int i = 0; i < 3 * width * height; i += 3)
  89:	41 83 c3 03          	add    r11d,0x3
  8d:	41 39 eb             	cmp    r11d,ebp
  90:	7c 9d                	jl     2f <color_filter_c+0x2f>
		green(dst, i) = g;
		blue(dst, i) = b;
	}

	//TIMER_END();
}
  92:	5b                   	pop    rbx
  93:	5d                   	pop    rbp
  94:	41 5c                	pop    r12
  96:	41 5d                	pop    r13
  98:	41 5e                	pop    r14
  9a:	41 5f                	pop    r15
  9c:	c3                   	ret    
